{"name":"Pyverilog","tagline":"Python-based Hardware Design Processing Toolkit for Verilog HDL","body":"What's Pyverilog?\r\n------------------------------\r\n\r\nPyverilog is open-source hardware design processing toolkit for Verilog HDL.\r\nAll source codes are written in Python.\r\n\r\nPyverilog includes **(1) code parser, (2) dataflow analyzer, (3) control-flow analyzer and (4) code generator**.\r\nYou can create your own design analyzer, code translator and code generator of Verilog HDL based on this toolkit.\r\n\r\n\r\nSoftware Requirements\r\n------------------------------\r\n\r\n* Python (2.7, 3.3 or later)\r\n* Icarus Verilog (0.9.6 or later)\r\n   - vparser.preprocessor.py uses 'iverilog -E' command insted of the preprocessor.\r\n   - 'apt-get install iverilog'\r\n* Graphviz and Pygraphviz (Python3 does not support Pygraphviz)\r\n   - graphgen.py in dataflow and controlflow.py in controlflow (without --nograph option) use Pygraphviz with Python 2.7.\r\n   - If you do not use graphgen.py and controlflow.py (without --nograph) option, Python 3 is OK.\r\n* Jinja2 (2.7 or later)\r\n   - ast\\_code\\_generator requires jinja2 module\r\n   - 'pip3 install jinja2'\r\n\r\n\r\nTools\r\n------------------------------\r\n\r\nThis software includes four tools for Verilog HDL design.\r\n\r\n* vparser: Code parser to generate AST (Abstract Syntax Tree) from source codes of Verilog HDL.\r\n* dataflow: Dataflow analyzer with an optimizer to remove redundant expressions and some dataflow handling tools.\r\n* controlflow: Control-flow analyzer with condition analyzer that identify when a signal is activated.\r\n* ast\\_code\\_generator: Verilog HDL code generator from AST.\r\n\r\n\r\nGetting Started\r\n------------------------------\r\n\r\nFirst, please prepare a Verilog HDL source file as below. The file name is 'test.v'.\r\nThis sample design adds the input value internally whtn the enable signal is asserted. Then is outputs its partial value to the LED.\r\n\r\n```verilog\r\nmodule top\r\n  (\r\n   input CLK, \r\n   input RST,\r\n   input enable,\r\n   input [31:0] value,\r\n   output [7:0] led\r\n  );\r\n  reg [31:0] count;\r\n  reg [7:0] state;\r\n  assign led = count[23:16];\r\n  always @(posedge CLK) begin\r\n    if(RST) begin\r\n      count <= 0;\r\n      state <= 0;\r\n    end else begin\r\n      if(state == 0) begin\r\n        if(enable) state <= 1;\r\n      end else if(state == 1) begin\r\n        state <= 2;\r\n      end else if(state == 2) begin\r\n        count <= count + value;\r\n        state <= 0;\r\n      end\r\n    end\r\n  end\r\nendmodule\r\n```\r\n\r\n**Code parser**\r\n\r\nLet's try syntax analysis. Please type the command as below.\r\n\r\n```\r\npython3.3 pyverilog/vparser/parser.py test.v\r\n```\r\n\r\nThen you got the result as below. The result of syntax analysis is displayed.\r\n\r\n```\r\nSource: \r\n  Description: \r\n    ModuleDef: top\r\n      Paramlist: \r\n      Portlist: \r\n        Ioport: \r\n          Input: CLK, False\r\n            Width: \r\n              IntConst: 0\r\n              IntConst: 0\r\n        Ioport: \r\n          Input: RST, False\r\n            Width: \r\n              IntConst: 0\r\n              IntConst: 0\r\n        Ioport: \r\n          Input: enable, False\r\n            Width: \r\n              IntConst: 0\r\n              IntConst: 0\r\n        Ioport: \r\n          Input: value, False\r\n            Width: \r\n              IntConst: 31\r\n              IntConst: 0\r\n        Ioport: \r\n          Output: led, False\r\n            Width: \r\n              IntConst: 7\r\n              IntConst: 0\r\n      Decl: \r\n        Reg: count, False\r\n          Width: \r\n            IntConst: 31\r\n            IntConst: 0\r\n      Decl: \r\n        Reg: state, False\r\n          Width: \r\n            IntConst: 7\r\n            IntConst: 0\r\n      Assign: \r\n        Lvalue: \r\n          Identifier: led\r\n        Rvalue: \r\n          Partselect: \r\n            Identifier: count\r\n            IntConst: 23\r\n            IntConst: 16\r\n      Always: \r\n        SensList: \r\n          Sens: posedge\r\n            Identifier: CLK\r\n        Block: None\r\n          IfStatement: \r\n            Identifier: RST\r\n            Block: None\r\n              NonblockingSubstitution: \r\n                Lvalue: \r\n                  Identifier: count\r\n                Rvalue: \r\n                  IntConst: 0\r\n              NonblockingSubstitution: \r\n                Lvalue: \r\n                  Identifier: state\r\n                Rvalue: \r\n                  IntConst: 0\r\n            Block: None\r\n              IfStatement: \r\n                Eq: \r\n                  Identifier: state\r\n                  IntConst: 0\r\n                Block: None\r\n                  IfStatement: \r\n                    Identifier: enable\r\n                    NonblockingSubstitution: \r\n                      Lvalue: \r\n                        Identifier: state\r\n                      Rvalue: \r\n                        IntConst: 1\r\n                IfStatement: \r\n                  Eq: \r\n                    Identifier: state\r\n                    IntConst: 1\r\n                  Block: None\r\n                    NonblockingSubstitution: \r\n                      Lvalue: \r\n                        Identifier: state\r\n                      Rvalue: \r\n                        IntConst: 2\r\n                  IfStatement: \r\n                    Eq: \r\n                      Identifier: state\r\n                      IntConst: 2\r\n                    Block: None\r\n                      NonblockingSubstitution: \r\n                        Lvalue: \r\n                          Identifier: count\r\n                        Rvalue: \r\n                          Plus: \r\n                            Identifier: count\r\n                            Identifier: value\r\n                      NonblockingSubstitution: \r\n                        Lvalue: \r\n                          Identifier: state\r\n                        Rvalue: \r\n                          IntConst: 0\r\n```\r\n\r\n**Dataflow analyzer**\r\n\r\nLet's try dataflow analysis. Please type the command as below.\r\n\r\n```\r\npython3.3 pyverilog/dataflow/dataflow_analyzer.py -t top test.v \r\n```\r\n\r\nThen you got the result as below. The result of each signal definition and each signal assignment are displayed.\r\n\r\n```\r\nDirective:\r\nInstance:\r\n(top, 'top')\r\nTerm:\r\n(Term name:top.led type:{'Output'} msb:(IntConst 7) lsb:(IntConst 0))\r\n(Term name:top.enable type:{'Input'} msb:(IntConst 0) lsb:(IntConst 0))\r\n(Term name:top.CLK type:{'Input'} msb:(IntConst 0) lsb:(IntConst 0))\r\n(Term name:top.count type:{'Reg'} msb:(IntConst 31) lsb:(IntConst 0))\r\n(Term name:top.state type:{'Reg'} msb:(IntConst 7) lsb:(IntConst 0))\r\n(Term name:top.RST type:{'Input'} msb:(IntConst 0) lsb:(IntConst 0))\r\n(Term name:top.value type:{'Input'} msb:(IntConst 31) lsb:(IntConst 0))\r\nBind:\r\n(Bind dest:top.count tree:(Branch Cond:(Terminal top.RST) True:(IntConst 0) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 0)) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 1)) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 2)) True:(Operator Plus Next:(Terminal top.count),(Terminal top.value)))))))\r\n(Bind dest:top.state tree:(Branch Cond:(Terminal top.RST) True:(IntConst 0) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 0)) True:(Branch Cond:(Terminal top.enable) True:(IntConst 1)) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 1)) True:(IntConst 2) False:(Branch Cond:(Operator Eq Next:(Terminal top.state),(IntConst 2)) True:(IntConst 0))))))\r\n(Bind dest:top.led tree:(Partselect Var:(Terminal top.count) MSB:(IntConst 23) LSB:(IntConst 16)))\r\n```\r\n\r\nLet's view the result of dataflow analysis as a picture file. Now we select 'led' as the target. Please type the command as below.\r\n\r\n```\r\npython3.3 pyverilog/dataflow/graphgen.py -t top -s top.led test.v \r\n```\r\n\r\nThen you got a png file (out.png). The picture shows that the definition of 'led' is a part-selection of 'count' from 23-bit to 16-bit.\r\n\r\n![out.png](http://cdn-ak.f.st-hatena.com/images/fotolife/s/sxhxtxa/20140101/20140101045641.png)\r\n\r\n**Control-flow analyzer**\r\n\r\nLet's try control-flow analysis. Please type the command as below.\r\n\r\n```\r\npython2.7 pyverilog/controlflow/controlflow_analyzer.py -t top test.v \r\n```\r\n\r\nThen you got the result as below. The result shows that the state machine structure and transition conditions to the next state in the state machine.\r\n\r\n```\r\nFSM signal: top.count, Condition list length: 4\r\nFSM signal: top.state, Condition list length: 5\r\nCondition: (Ulnot, Eq), Inferring transition condition\r\nCondition: (Eq, top.enable), Inferring transition condition\r\nCondition: (Ulnot, Ulnot, Eq), Inferring transition condition\r\n# SIGNAL NAME: top.state\r\n# DELAY CNT: 0\r\n0 --(top_enable>'d0)--> 1\r\n1 --None--> 2\r\n2 --None--> 0\r\nLoop\r\n(0, 1, 2)\r\n```\r\n\r\nYou got also a png file (top_state.png). The picture shows that the graphical structure of the state machine.\r\n\r\n![top_state.png](http://cdn-ak.f.st-hatena.com/images/fotolife/s/sxhxtxa/20140101/20140101045835.png)\r\n\r\n**Code generator**\r\n \r\nFinally, let's try code generation. Please prepare a Python script as below. The file name is 'test.py'.\r\nA Verilog HDL code is represented by using the AST classes defined in 'vparser.ast'.\r\n\r\n```python\r\nimport pyverilog.vparser.ast as vast\r\nfrom pyverilog.ast_code_generator.codegen import ASTCodeGenerator\r\n\r\nparams = vast.Paramlist(())\r\nclk = vast.Ioport( vast.Input('CLK') )\r\nrst = vast.Ioport( vast.Input('RST') )\r\nwidth = vast.Width( vast.IntConst('7'), vast.IntConst('0') )\r\nled = vast.Ioport( vast.Output('led', width=width) )\r\nports = vast.Portlist( (clk, rst, led) )\r\nitems = ( vast.Assign( vast.Identifier('led'), vast.IntConst('8') ) ,)\r\nast = vast.ModuleDef(\"top\", params, ports, items)\r\n\r\ncodegen = ASTCodeGenerator()\r\nrslt = codegen.visit(ast)\r\nprint(rslt)\r\n```\r\n\r\nPlease type the command as below at the same directory with Pyverilog.\r\n\r\n```\r\npython3.3 test.py\r\n```\r\n\r\nThen Verilog HDL code generated from the AST instances is displayed.\r\n\r\n```verilog\r\n\r\nmodule top\r\n (\r\n  input [0:0] CLK, \r\ninput [0:0] RST, \r\noutput [7:0] led\r\n\r\n );\r\n  assign led = 8;\r\nendmodule\r\n\r\n```\r\n\r\n\r\nRelated Project and Site\r\n------------------------------\r\n\r\n[PyCoRAM](http://shtaxxx.github.io/PyCoRAM/)\r\n- Python-based Implementation of CoRAM Memory Architecture for AXI4 Interconnection on FPGAs\r\n\r\n[shtaxxx.hatenablog.com](http://shtaxxx.hatenablog.com/entry/2014/01/01/045856)\r\n- Blog entry for introduction and examples of Pyverilog (in Japansese)\r\n\r\n\r\nLicense\r\n------------------------------\r\n\r\nApache License 2.0\r\n(http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\nThis software package includes PLY-3.4.\r\nThe license of PLY is BSD.\r\n\r\n\r\nCopyright and Contact\r\n------------------------------\r\n\r\nCopyright (C) 2013, Shinya Takamaeda-Yamazaki\r\n\r\nE-mail: takamaeda\\_at\\_arch.cs.titech.ac.jp\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}